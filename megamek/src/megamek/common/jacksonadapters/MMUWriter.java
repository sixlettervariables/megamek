/*
 * Copyright (c) 2024 - The MegaMek Team. All Rights Reserved.
 *
 * This file is part of MegaMek.
 *
 * MegaMek is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MegaMek is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.
 */
package megamek.common.jacksonadapters;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
import megamek.SuiteConstants;
import megamek.common.alphaStrike.ASCardDisplayable;
import megamek.common.strategicBattleSystems.SBFFormation;
import megamek.common.strategicBattleSystems.SBFUnit;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

/**
 * This class has static methods for writing information to a MMU file which uses YAML formatting
 * to hold information about SBF Formations, Units and AlphaStrikeElements.
 */
public class MMUWriter {

    private static final String HEADER = "# Generated by " + SuiteConstants.PROJECT_NAME + " "
            + SuiteConstants.VERSION + " on " + LocalDate.now() + "\n" +
            "# This file uses YAML formatting.\n" +
            "# When editing, make sure to keep the indentation and lists intact!";

    private static final ObjectMapper yamlMapper =
            new ObjectMapper(new YAMLFactory()
                    .disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER)
                    .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES));

    /**
     * Writes any of the given objects that are of a supported type to the given file in MMU (YAML) format. Will
     * do nothing if none of the objects are supported for serialization. This method will write only necessary
     * stats and link to the unit cache for canon units.
     *
     * @param file The file to write to. Will be overwritten if present.
     * @param contents The objects to write.
     */
    public void writeMMUFile(File file, List<?> contents) throws IOException {
        write(file, contents, yamlMapper.writerWithView(Views.CanonCacheLinks.class));
    }

    /**
     * Writes any of the given objects that are of a supported type to the given file in MMU (YAML) format. Will
     * do nothing if none of the objects are supported for serialization. This method will write the full stats
     * of all objects even if any are a canon unit.
     *
     * @param file The file to write to. Will be overwritten if present.
     * @param contents The objects to write.
     */
    public void writeMMUFileFullStats(File file, List<?> contents) throws IOException {
        write(file, contents, yamlMapper.writerWithView(Views.FullStats.class));
    }

    private static void write(File file, List<?> contents, ObjectWriter writer) throws IOException {
        List<Object> supportedContents = filteredList(contents);
        if (supportedContents.isEmpty()) {
            return;
        }
        try (PrintStream outputStream = new PrintStream(file)) {
            outputStream.println(HEADER);
            if (supportedContents.size() == 1) {
                writer.writeValue(outputStream, contents.get(0));
            } else {
                writer.writeValue(outputStream, contents);
            }
        }
    }

    /** @return True when the given object is currently supported with MM's Jackson YAML serialization. */
    private static boolean isSupported(Object content) {
        return content instanceof ASCardDisplayable || content instanceof SBFFormation || content instanceof SBFUnit;
    }

    private static List<Object> filteredList(List<?> original) {
        return original.stream().filter(MMUWriter::isSupported).collect(Collectors.toList());
    }

    static class Views {
        static class FullStats { }

        static class CanonCacheLinks { }
    }
}